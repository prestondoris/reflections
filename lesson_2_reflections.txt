What happens when you initialize a repository? Why do you need to do it?

	You create a new git repository which will allow you to start making commits. Without initiallizing the repository you cannot make commits to track your changes.


How is the staging area different from the working directory and the repository? What value do you think it offers?

	The staging area is the middle ground for you to put everything together before making a commit to the repository. The working directory has all of your files, while the staging area will allow you to put any or all files together to be commited to the repository. This value offers the user to combine similar files that he/she believes to be logically connected in some way.


How can you use the staging area to make sure you have one commit per logical change?
	
	The stagging area is usful to insure one commit per logical stage because it allows any and all files that pertain to that logical change to be commited at the same time.


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	If you are working a new feature but would like to continue with a version of your code that is working properly without the new feature, a branch can allow you to continue to work on the new feature without changing the "older" working file on the master branch. It is a way to allow you to experiment without risk of breaking a working version.


How do the diagrams help you visualize the branch structure?

	I am a visual person, so the diagram of the state of the repository is extremely helpful for me to track the commits and branches. Being able to see the branch structure is also helpful when checking out previous commits and how making a change to a previous commit and commiting that change makes that commit unreachable.